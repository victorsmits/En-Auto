var mongoose = require('mongoose');
var Schema = mongoose.Schema;
if (mongoose.connection.readyState === 0) {
  mongoose.connect(require('./connection-string'));
}
<% if (secure) { %>
var bcrypt = require('bcrypt-nodejs');
<% } %>

var newSchema = new Schema({
  <% for (var attr in attrs) { %>
  <%- "'"+attr+"': { type: "+attrs[attr]+" }," %><% } %>
  'createdAt': { type: Date, default: Date.now },
  'updatedAt': { type: Date, default: Date.now }
});

newSchema.pre('save', function(next){
  this.updatedAt = Date.now();
  next();
});

newSchema.pre('update', function() {
  this.update({}, { $set: { updatedAt: Date.now() } });
});

newSchema.pre('findOneAndUpdate', function() {
  this.update({}, { $set: { updatedAt: Date.now() } });
});

<% secureAttrs.forEach(function(name) { %>
newSchema.pre('save', function(next) {
  var record = this;

  // only hash if it has been modified (or is new)
  if (!record.isModified('<%- name %>')) return next();

  // hash the password using our new salt
  bcrypt.hash(record['<%- name %>'], null, null, function(err, hash) {
    if (err) return next(err);
    record['<%- name %>'] = hash;
    next();
  });
});

newSchema.methods['<%- name + "Compare" %>'] = function(attempt, next) {
  bcrypt.compare(attempt, this['<%- name %>'], function(err, isMatch) {
    if (err) return next(err);
    next(null, isMatch);
  });
};
<% }) %>

module.exports = mongoose.model(<%- "'"+name+"'" %>, newSchema);
